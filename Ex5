using System.Text;
using static System.Console;
internal class Program
{
    static bool exitRequested = false;
    const string exitCommand = "exit";
    const string helpCommand = "help";
    const string clearCommand = "clear";

    const int attempts = 6;
    const int maxLines = 3;
    const int maxColumns = 3;

    const char emptyCellSign = 'O';
    const char wrongCellSign = 'X';
    const char correctCellSign = 'V';
    static void Main(string[] args)
    {
        InputEncoding = Encoding.Unicode;
        OutputEncoding = Encoding.Unicode;
        char[,] table = new char[maxLines, maxColumns];
        Random random = new Random();
        int[] randomElement = new int[table.Rank];

        while (exitRequested == false)
        {
            table = FillTable(maxLines, maxColumns);
            int currentGameAttempts = attempts;

            for (int i = 0; i < table.Rank; i++)
                randomElement[i] = random.Next(table.GetLength(i));

            while (currentGameAttempts > 0)
            {
                Clear();
                WriteLine($"Чтобы прочесть правила и команды, в любой момент введите {helpCommand.ToUpper()}.\n");
                WriteLine($"Попыток осталось: {currentGameAttempts}");
                ShowTable(table);
                int[] userMove = new int[table.Rank];

                for (int i = 0; i < table.Rank; i++)
                {
                    if (exitRequested == false)
                    {
                        bool answerCorret = false;

                        do
                        {
                            if (i == 0)
                                Write("Введите строку: ");
                            else
                                Write("Введите столбец: ");

                            string userInput = GetUserInput();

                            if (userInput == exitCommand)
                            {
                                currentGameAttempts = 0;
                                answerCorret = true;
                                break;
                            }
                            else if (int.TryParse(userInput, out int value) && value <= table.GetLength(i) && value > 0)
                            {
                                userMove[i] = value - 1;
                                answerCorret = true;
                            }
                            else if (userInput == helpCommand || userInput == clearCommand)
                            {
                                continue;
                            }
                            else
                            {
                                WriteLine("Неверная команда или число за пределами таблицы, попробуйте снова.\n");
                                continue;
                            }
                        } while (answerCorret == false);
                    }
                }

                if (exitRequested == false)
                {
                    if (userMove[0] == randomElement[0] && userMove[1] == randomElement[1])
                    {
                        Clear();
                        table[userMove[0], userMove[1]] = correctCellSign;
                        ShowTable(table);
                        WriteLine("Поздравляем! Вы отгадали позицию. Повторить игру? (Y/N)");
                    }
                    else if (currentGameAttempts == 1)
                    {
                        WriteLine("Мимо. Попытки закончились, вы проиграли. Повторить игру? (Y/N)");
                        ReadKey();
                    }
                    else
                    {
                        currentGameAttempts -= 1;
                        table[userMove[0], userMove[1]] = wrongCellSign;
                        WriteLine("Мимо. Попробуйте другую позицию. Нажмите ещё раз для продолжения...");
                        ReadKey();
                        continue;
                    }

                    bool coorectAnswer = false;
                    do
                    {
                        string input = ReadLine().ToLower();

                        if (input == "y" || input == "yes" || input == "да" || input == "д")
                        {
                            coorectAnswer = true;
                            currentGameAttempts = 0;
                        }
                        else if (input == "n" || input == "no" || input == "нет" || input == "н")
                        {
                            coorectAnswer = true;
                            currentGameAttempts = 0;
                            exitRequested = true;
                        }
                        else
                        {
                            WriteLine("Неизвестная команда. Повторите ввод.");
                        }
                    } while (coorectAnswer == false);
                }
            }
        }

        Clear();
        WriteLine("Программа завершила работу. Нажмите для продолжения...");
        Read();
    }

    static string GetUserInput()
    {
        string userInput = ReadLine().ToLower();

        if (userInput == helpCommand.ToLower())
        {
            WriteLine($"\nПравила игры: У вас есть поле, размером {maxLines} на {maxColumns}, в котором загадана одна позиция элемента.\n" +
                $"Вам нужно отгадать, где он находится. Для этого по очереди вводите, сначала строку, затем столбец.\n" +
                $"У вас имеется {attempts} попыток, если вы не отгадаете, игра сбросит прогресс и будет загадана новая позиция элемента.\n" +
                $"Чтобы покинуть игру, в любой момент введите {exitCommand.ToUpper()}, для очистки консоли введите {clearCommand.ToUpper()}.\n");
            return helpCommand;
        }
        else if (userInput == exitCommand.ToLower())
        {
            exitRequested = true;
            return exitCommand;
        }
        else if (userInput == clearCommand.ToLower())
        {
            Clear();
            return clearCommand;
        }
        else
        {
            return userInput;
        }
    }

    static char[,] FillTable(int length, int heigth)
    {
        char[,] table = new char[length, heigth];

        for (int i = 0; i < table.GetLength(0); i++)
        {
            for (int j = 0; j < table.GetLength(1); j++)
            {
                table[i, j] = emptyCellSign;
            }
        }

        return table;
    }

    static void ShowTable(char[,] table)
    {
        Write(" ");

        for (int i = 0; i < table.GetLength(0); i++)
        {
            Write(" " + (i + 1));
        }

        WriteLine();

        for (int i = 0; i < table.GetLength(0); i++)
        {
            Write(i + 1);

            for (int j = 0; j < table.GetLength(1); j++)
            {
                Write(" " + table[i, j].ToString().ToUpper());
            }

            WriteLine();
        }

        WriteLine();
    }
}
